<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var types = new [] { 
    ("Bool", "bool", "Boolean"),
    ("Byte", "byte", "Byte"),
    ("Short", "short", "Short"),
    ("Int", "int", "Integer"), 
    ("Long", "long", "Long"),
    ("Float", "float", "Float"),
    ("Double", "double", "Double"),
    ("Decimal", "decimal", "Decimal"),
    ("String", "string", "String"),
    ("Guid", "Guid", "Guid"),
    ("ByteArray", "byte[]", "ByteArray"),
};
var nullableTypes = new[] {
    ("NullableBool", "bool?", "Boolean"),
    ("NullableByte", "byte?", "Byte"),
    ("NullableShort", "short?", "Short"),
    ("NullableInt", "int?", "Integer"),
    ("NullableLong", "long?", "Long"),
    ("NullableFloat", "float?", "Float"),
    ("NullableDouble", "double?", "Double"),
    ("NullableDecimal", "decimal?", "Decimal"),
    ("NullableGuid", "Guid?", "Guid"),
}; #>
using System;

namespace RedLight;

<# foreach (var p in types) { #>
internal sealed class <#= p.Item1 #>QueryParameter : QueryParameter
{
    public <#= p.Item1 #>QueryParameter(string name, <#= p.Item2 #> value) : base(name, value) { }

    public override ColumnType Type => ColumnType.<#= p.Item3 #>;

    public override bool Nullable => false;
}

<# } #>
<# foreach (var p in nullableTypes) { #>
internal sealed class <#= p.Item1 #>QueryParameter : QueryParameter
{
    public <#= p.Item1 #>QueryParameter(string name, <#= p.Item2 #> value) : base(name, value.HasValue ? value.Value : DBNull.Value) { }

    public override ColumnType Type => ColumnType.<#= p.Item3 #>;

    public override bool Nullable => true;
}

<# } #>