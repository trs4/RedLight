<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var types = new [] { 
    ("Bool", "bool"),
    ("NullableBool", "bool?"),
    ("Byte", "byte"),
    ("NullableByte", "byte?"),
    ("Short", "short"),
    ("NullableShort", "short?"),
    ("Int", "int"), 
    ("NullableInt", "int?"), 
    ("Long", "long"),
    ("NullableLong", "long?"),
    ("Float", "float"),
    ("NullableFloat", "float?"),
    ("Double", "double"),
    ("NullableDouble", "double?"),
    ("Decimal", "decimal"),
    ("NullableDecimal", "decimal?"),
    ("String", "string"),
    ("DateTime", "DateTime"),
    ("NullableDateTime", "DateTime?"),
    ("TimeSpan", "TimeSpan"),
    ("NullableTimeSpan", "TimeSpan?"),
    ("Guid", "Guid"),
    ("NullableGuid", "Guid?"),
    ("ByteArray", "byte[]"),
}; #>
using System;

namespace RedLight;

public static class WhereQueryColumnsFluent
{
<# foreach (var p in types) { #>
    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="column">Имя поля</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery>(this TQuery query, string column, <#= p.Item2 #> value)
        where TQuery : WhereQuery
    {
        string escapedColumnName = query.Connection.Naming.GetName(column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, Op.Equal, value));

        return query;
    }
    
    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="alias">Псевдоним таблицы</param>
    /// <param name="column">Имя поля</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery>(this TQuery query, string alias, string column, <#= p.Item2 #> value)
        where TQuery : WhereQuery
    {
        string escapedColumnName = query.Connection.Naming.GetNameWithAlias(alias, column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, Op.Equal, value));

        return query;
    }
    
    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="column">Имя поля</param>
    /// <param name="termOperator">Оператор</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery>(this TQuery query, string column, Op termOperator, <#= p.Item2 #> value)
        where TQuery : WhereQuery
    {
        string escapedColumnName = query.Connection.Naming.GetName(column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, termOperator, value));

        return query;
    }

    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="alias">Псевдоним таблицы</param>
    /// <param name="column">Имя поля</param>
    /// <param name="termOperator">Оператор</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery>(this TQuery query, string alias, string column, Op termOperator, <#= p.Item2 #> value)
        where TQuery : WhereQuery
    {
        string escapedColumnName = query.Connection.Naming.GetNameWithAlias(alias, column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, termOperator, value));

        return query;
    }

    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="column">Имя поля</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery, TEnum>(this TQuery query, TEnum column, <#= p.Item2 #> value)
        where TQuery : WhereQuery
        where TEnum : Enum
    {
        string escapedColumnName = query.Connection.Naming.GetName(column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, Op.Equal, value));

        return query;
    }
    
    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="alias">Псевдоним таблицы</param>
    /// <param name="column">Имя поля</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery, TEnum>(this TQuery query, string alias, TEnum column, <#= p.Item2 #> value)
        where TQuery : WhereQuery
        where TEnum : Enum
    {
        string escapedColumnName = query.Connection.Naming.GetNameWithAlias(alias, column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, Op.Equal, value));

        return query;
    }

    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="column">Имя поля</param>
    /// <param name="termOperator">Оператор</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery, TEnum>(this TQuery query, TEnum column, Op termOperator, <#= p.Item2 #> value)
        where TQuery : WhereQuery
        where TEnum : Enum
    {
        string escapedColumnName = query.Connection.Naming.GetName(column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, termOperator, value));

        return query;
    }

    /// <summary>Добавляет условие по полю с значением</summary>
    /// <param name="alias">Псевдоним таблицы</param>
    /// <param name="column">Имя поля</param>
    /// <param name="termOperator">Оператор</param>
    /// <param name="value">Значение</param>
    public static TQuery WithTerm<TQuery, TEnum>(this TQuery query, string alias, TEnum column, Op termOperator, <#= p.Item2 #> value)
        where TQuery : WhereQuery
        where TEnum : Enum
    {
        string escapedColumnName = query.Connection.Naming.GetNameWithAlias(alias, column);

        query.Where.AddTerm(new OperatorTerm<#= p.Item1 #>(
            query, escapedColumnName, termOperator, value));

        return query;
    }

<# } #>
}