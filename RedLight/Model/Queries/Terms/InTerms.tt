<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var types = new [] { 
    ("Bool", "bool", ""),
    ("Char", "char", ""),
    ("SByte", "sbyte", "(byte)"),
    ("Byte", "byte", ""),
    ("Short", "short", ""),
    ("UShort", "ushort", "(short)"),
    ("Int", "int", ""),
    ("UInt", "uint", "(int)"),
    ("Long", "long", ""),
    ("ULong", "ulong", "(long)"),
    ("Float", "float", ""),
    ("Double", "double", ""),
    ("Decimal", "decimal", ""),
    ("String", "string", ""),
    ("Guid", "Guid", ""),
    ("DateTime", "DateTime", ""),
    ("TimeSpan", "TimeSpan", ""),
}; #>
using System;
using System.Collections.Generic;

namespace RedLight;

<# foreach (var p in types) { #>
/// <summary>Условие по списку значений <#= p.Item2 #></summary>
internal sealed class InTerm<#= p.Item1 #> : InTerm<<#= p.Item2 #>>
{
    public InTerm<#= p.Item1 #>(Query owner, string column, IReadOnlyList<<#= p.Item2 #>> values) : base(owner, column, values) { }

    protected sealed override string EscapeValue(<#= p.Item2 #> value) => Connection.Escaping.Escape(<#= p.Item3 #>value);
}

<# } #>